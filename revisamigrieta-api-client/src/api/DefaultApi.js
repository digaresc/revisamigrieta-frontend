/**
 * revisamigrieta.appspot.com
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GrietaModel', 'model/GrietaModelCollection', 'model/RevisionModel', 'model/RevisionModelCollection'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GrietaModel'), require('../model/GrietaModelCollection'), require('../model/RevisionModel'), require('../model/RevisionModelCollection'));
  } else {
    // Browser globals (root is window)
    if (!root.Revisamigrietaappspotcom) {
      root.Revisamigrietaappspotcom = {};
    }
    root.Revisamigrietaappspotcom.DefaultApi = factory(root.Revisamigrietaappspotcom.ApiClient, root.Revisamigrietaappspotcom.GrietaModel, root.Revisamigrietaappspotcom.GrietaModelCollection, root.Revisamigrietaappspotcom.RevisionModel, root.Revisamigrietaappspotcom.RevisionModelCollection);
  }
}(this, function(ApiClient, GrietaModel, GrietaModelCollection, RevisionModel, RevisionModelCollection) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the grietaPublish operation.
     * @callback module:api/DefaultApi~grietaPublishCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Boolean} mas20porciento 
     * @param {String} comentario 
     * @param {Boolean} desplomes 
     * @param {Boolean} desprendimiento 
     * @param {Boolean} golpeteo 
     * @param {Boolean} hundimiento 
     * @param {Boolean} pisosHuecos 
     * @param {String} tweet 
     * @param {Boolean} vibraciones 
     * @param {Number} latitude 
     * @param {Number} longitude 
     * @param {module:model/String} tipo 
     * @param {Boolean} diagonales 
     * @param {Boolean} paralelas 
     * @param {module:model/String} ubicacion 
     * @param {String} filesId 
     * @param {module:api/DefaultApi~grietaPublishCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.grietaPublish = function(mas20porciento, comentario, desplomes, desprendimiento, golpeteo, hundimiento, pisosHuecos, tweet, vibraciones, latitude, longitude, tipo, diagonales, paralelas, ubicacion, filesId, callback) {
      var postBody = null;

      // verify the required parameter 'mas20porciento' is set
      if (mas20porciento === undefined || mas20porciento === null) {
        throw new Error("Missing the required parameter 'mas20porciento' when calling grietaPublish");
      }

      // verify the required parameter 'comentario' is set
      if (comentario === undefined || comentario === null) {
        throw new Error("Missing the required parameter 'comentario' when calling grietaPublish");
      }

      // verify the required parameter 'desplomes' is set
      if (desplomes === undefined || desplomes === null) {
        throw new Error("Missing the required parameter 'desplomes' when calling grietaPublish");
      }

      // verify the required parameter 'desprendimiento' is set
      if (desprendimiento === undefined || desprendimiento === null) {
        throw new Error("Missing the required parameter 'desprendimiento' when calling grietaPublish");
      }

      // verify the required parameter 'golpeteo' is set
      if (golpeteo === undefined || golpeteo === null) {
        throw new Error("Missing the required parameter 'golpeteo' when calling grietaPublish");
      }

      // verify the required parameter 'hundimiento' is set
      if (hundimiento === undefined || hundimiento === null) {
        throw new Error("Missing the required parameter 'hundimiento' when calling grietaPublish");
      }

      // verify the required parameter 'pisosHuecos' is set
      if (pisosHuecos === undefined || pisosHuecos === null) {
        throw new Error("Missing the required parameter 'pisosHuecos' when calling grietaPublish");
      }

      // verify the required parameter 'tweet' is set
      if (tweet === undefined || tweet === null) {
        throw new Error("Missing the required parameter 'tweet' when calling grietaPublish");
      }

      // verify the required parameter 'vibraciones' is set
      if (vibraciones === undefined || vibraciones === null) {
        throw new Error("Missing the required parameter 'vibraciones' when calling grietaPublish");
      }

      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling grietaPublish");
      }

      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling grietaPublish");
      }

      // verify the required parameter 'tipo' is set
      if (tipo === undefined || tipo === null) {
        throw new Error("Missing the required parameter 'tipo' when calling grietaPublish");
      }

      // verify the required parameter 'diagonales' is set
      if (diagonales === undefined || diagonales === null) {
        throw new Error("Missing the required parameter 'diagonales' when calling grietaPublish");
      }

      // verify the required parameter 'paralelas' is set
      if (paralelas === undefined || paralelas === null) {
        throw new Error("Missing the required parameter 'paralelas' when calling grietaPublish");
      }

      // verify the required parameter 'ubicacion' is set
      if (ubicacion === undefined || ubicacion === null) {
        throw new Error("Missing the required parameter 'ubicacion' when calling grietaPublish");
      }

      // verify the required parameter 'filesId' is set
      if (filesId === undefined || filesId === null) {
        throw new Error("Missing the required parameter 'filesId' when calling grietaPublish");
      }


      var pathParams = {
      };
      var queryParams = {
        'mas20porciento': mas20porciento,
        'comentario': comentario,
        'desplomes': desplomes,
        'desprendimiento': desprendimiento,
        'golpeteo': golpeteo,
        'hundimiento': hundimiento,
        'pisosHuecos': pisosHuecos,
        'tweet': tweet,
        'vibraciones': vibraciones,
        'latitude': latitude,
        'longitude': longitude,
        'tipo': tipo,
        'diagonales': diagonales,
        'paralelas': paralelas,
        'ubicacion': ubicacion,
        'filesId': filesId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['firebase'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/grietas', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaPublishReview operation.
     * @callback module:api/DefaultApi~grietaPublishReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} comentarios 
     * @param {Boolean} diagonalesLosa 
     * @param {Boolean} diagonalesPiso 
     * @param {Boolean} paralelasPiso 
     * @param {Boolean} peligroInminente 
     * @param {String} id 
     * @param {module:api/DefaultApi~grietaPublishReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.grietaPublishReview = function(comentarios, diagonalesLosa, diagonalesPiso, paralelasPiso, peligroInminente, id, callback) {
      var postBody = null;

      // verify the required parameter 'comentarios' is set
      if (comentarios === undefined || comentarios === null) {
        throw new Error("Missing the required parameter 'comentarios' when calling grietaPublishReview");
      }

      // verify the required parameter 'diagonalesLosa' is set
      if (diagonalesLosa === undefined || diagonalesLosa === null) {
        throw new Error("Missing the required parameter 'diagonalesLosa' when calling grietaPublishReview");
      }

      // verify the required parameter 'diagonalesPiso' is set
      if (diagonalesPiso === undefined || diagonalesPiso === null) {
        throw new Error("Missing the required parameter 'diagonalesPiso' when calling grietaPublishReview");
      }

      // verify the required parameter 'paralelasPiso' is set
      if (paralelasPiso === undefined || paralelasPiso === null) {
        throw new Error("Missing the required parameter 'paralelasPiso' when calling grietaPublishReview");
      }

      // verify the required parameter 'peligroInminente' is set
      if (peligroInminente === undefined || peligroInminente === null) {
        throw new Error("Missing the required parameter 'peligroInminente' when calling grietaPublishReview");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling grietaPublishReview");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'comentarios': comentarios,
        'diagonalesLosa': diagonalesLosa,
        'diagonalesPiso': diagonalesPiso,
        'paralelasPiso': paralelasPiso,
        'peligroInminente': peligroInminente
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['firebase'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/v1/grietas/{id}/revisiones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaRetrieveAllGrietas operation.
     * @callback module:api/DefaultApi~grietaRetrieveAllGrietasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrietaModelCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~grietaRetrieveAllGrietasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrietaModelCollection}
     */
    this.grietaRetrieveAllGrietas = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GrietaModelCollection;

      return this.apiClient.callApi(
        '/v1/grietas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaRetrieveAllGrietasReview operation.
     * @callback module:api/DefaultApi~grietaRetrieveAllGrietasReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevisionModelCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} grietaId 
     * @param {module:api/DefaultApi~grietaRetrieveAllGrietasReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevisionModelCollection}
     */
    this.grietaRetrieveAllGrietasReview = function(grietaId, callback) {
      var postBody = null;

      // verify the required parameter 'grietaId' is set
      if (grietaId === undefined || grietaId === null) {
        throw new Error("Missing the required parameter 'grietaId' when calling grietaRetrieveAllGrietasReview");
      }


      var pathParams = {
        'grietaId': grietaId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RevisionModelCollection;

      return this.apiClient.callApi(
        '/v1/grietas/{grietaId}/revisiones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaRetrieveAllPendingGrietas operation.
     * @callback module:api/DefaultApi~grietaRetrieveAllPendingGrietasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrietaModelCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~grietaRetrieveAllPendingGrietasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrietaModelCollection}
     */
    this.grietaRetrieveAllPendingGrietas = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GrietaModelCollection;

      return this.apiClient.callApi(
        '/v1/grietas/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaRetrieveGrietas operation.
     * @callback module:api/DefaultApi~grietaRetrieveGrietasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GrietaModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DefaultApi~grietaRetrieveGrietasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GrietaModel}
     */
    this.grietaRetrieveGrietas = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling grietaRetrieveGrietas");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GrietaModel;

      return this.apiClient.callApi(
        '/v1/grietas/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grietaRetrieveGrietasReview operation.
     * @callback module:api/DefaultApi~grietaRetrieveGrietasReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevisionModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} grietaId 
     * @param {String} revisionId 
     * @param {module:api/DefaultApi~grietaRetrieveGrietasReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevisionModel}
     */
    this.grietaRetrieveGrietasReview = function(grietaId, revisionId, callback) {
      var postBody = null;

      // verify the required parameter 'grietaId' is set
      if (grietaId === undefined || grietaId === null) {
        throw new Error("Missing the required parameter 'grietaId' when calling grietaRetrieveGrietasReview");
      }

      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling grietaRetrieveGrietasReview");
      }


      var pathParams = {
        'grietaId': grietaId,
        'revisionId': revisionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RevisionModel;

      return this.apiClient.callApi(
        '/v1/grietas/{grietaId}/revisiones/{revisionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
